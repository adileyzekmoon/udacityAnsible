# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
  destroy_environment:
    steps:
      - run: 
          name: destroy environment
          command:  |
            aws cloudformation delete-stack --stack-name ansibleExercise 
          when: on_fail
jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:  |
          aws cloudformation deploy \
          --stack-name ansibleExercise \
          --template-file template.yml
  ssh_ansible:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["58:61:bc:84:e9:90:c3:7c:75:3d:c3:c4:0b:1e:96:f7"]
      - run:
          name: install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory main.yml
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            if curl -s --head "https://google.com"
            then
              echo "It worked!"
            else
              echo "It failed"
            fi
  smoke_test_fail_sim:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: simulate error
          command: |
            return 1
      - destroy_environment
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
            mkdir ~/workspace
      - run:
          name: install tar utilities
          command: |
            yum install -y tar gzip
      - run:
          name: get latest deployment id
          command: |
            aws cloudformation list-exports --query "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text > ~/workspace/output.txt
            aws s3 cp "s3://$(cat ~/workspace/output.txt)/index.html" index.html
      - persist_to_workspace:
          root: ~/workspace
          paths: 
            - output.txt
            - index.html
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar utilities
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/workspace
      - run:
          name: create and deploy front end
          command: |
            aws cloudformation deploy --template-file bucket.yml --stack-name bucket-"${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides NAME=bucket-"${CIRCLE_WORKFLOW_ID:0:7}"
            echo " ${CIRCLE_WORKFLOW_ID:0:7}" >> ~/workspace/index.html
            cat ~/workspace/index.html
            aws s3 cp ~/workspace/index.html s3://bucket-"${CIRCLE_WORKFLOW_ID:0:7}"
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: promote to production
          command: |
            aws cloudformation deploy --template-file cloudfront.yml --stack-name production-distro --parameter-overrides PipelineID=bucket-"${CIRCLE_WORKFLOW_ID:0:7}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar utilities
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/workspace
      - run:
          name: clean up old front end
          command: |
            aws s3 rm "s3://$(cat ~/workspace/output.txt)" --recursive
            aws cloudformation delete-stack --stack-name "$(cat ~/workspace/output.txt)"
            aws cloudfront create-invalidation --distribution-id E9S19KTRQTHYC --paths "/*"

      
      


# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      # - create_infrastructure
      # - ssh_ansible
      # - smoke_test_fail_sim:
      #     requires: [create_infrastructure]
      - get_last_deployment_id
      - create_and_deploy_front_end:
          requires: [get_last_deployment_id]
      - promote_to_production:
          requires: [create_and_deploy_front_end]
      - clean_up_old_front_end:
          requires: [promote_to_production]
